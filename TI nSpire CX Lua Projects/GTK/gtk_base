-- platform.apilevel = '2.0'
---------------------------------- 
-- GTK 1.0: GUI Tool Kit        --
-- (C) 2021 Joseph W. Beaman    --
--                              --
-- Based on and inspired by:    --
--   ETK 4.0 Demo project       -- 
--   (C) 2015 Jim Bauwens       --
--                              -- 
-- Licensed under the GNU GPLv3 -- 
---------------------------------- 

-------------------------------------------------
-- Use this function to load the GTK modules   --
-- Copy and paste this code into your project. --
-------------------------------------------------
local function loadLibrary(libraryName)  
  -- libraryName is a string.  To refer to a 
  -- library from GTKLib, the string starts
  -- with "GTKLib\\".  (i.e. "GTKLib\\GTK_Base")
  local lualib
  
  -- load library source code
  lualib =  var.recall(libraryName)

  if not lualib then
    print("Library " .. libraryName .. " failed to load")
    return 
  end

  -- compile library  -- first pass
  lualib, err = loadstring(lualib)
  if err then
    error(err)
  end

  if not lualib then
    print("Library " .. libraryName .. " failed to compile")
    return
  end

  -- Run library   -- second pass 
  lualib()
end

gtk = {} 
gtk.tools = {}

loadLibrary("GTKLib\\GTK_Tools")

local gtk = gtk 


------------------ 
-- Enumerations -- 
------------------

-- Note that this is not local, and thus can be accessed outside of GTK
Enum = function(enumTable) 
  for k, v in ipairs(enumTable) do 
    enumTable[v] = k 
  end 

  return enumTable 
end 


------------- 
-- Logging -- 
------------- 

-- Note that this is not local, and thus can be accessed outside of GTK
do Logger = {}
  Logger.Log = function (message, ...)
--    print(message:format(...))
  end 

  Logger.Warn = function (message, ...)
    Logger.Log("Warning: " .. message, ...) 
  end 
end 


----------------------------------------------- 
-- Handle different types of user unit input -- 
----------------------------------------------- 

do 
  UnitCalculator = {} 
  UnitCalculator.GetAbsoluteValue = function (value, referenceValue) 
    local numberValue, unit = string.match(tostring(value), "([-%d.]+)(.*)") 

    local number = tonumber(numberValue) 

    if not number then 
        Logger.Warn("UnitCalculator.GetAbsoluteValue - Invalid number value, returning 0") 
        return 0 
    end 

    local isPercent = unit == "%" 

    if number < 0 then 
      --print(number, "from") 
      --number = (isPercent and 100 or referenceValue) + number 
      --print(number, "to") 
    end 

    if isPercent then 
      return referenceValue / 100 * number 
    else 
      return number 
    end 
  end 
end 


------------------------------------------------- 
-- Keep dimensions in a nice to handle wrapper -- 
------------------------------------------------- 

do Dimension = class() 
  function Dimension:init(width, height) 
    self.width = width 
    self.height = height 
  end 

  function Dimension:get(parentWidth, parentHeight, dirty) 
    if self.width then 
      if dirty or not self.cachedWidth then 
        self.cachedWidth  = UnitCalculator.GetAbsoluteValue(self.width, parentWidth) 
        self.cachedHeight = UnitCalculator.GetAbsoluteValue(self.height, parentHeight) 
      end 

      return self.cachedWidth, self.cachedHeight 
    else 
      self.cachedWidth = parentWidth 
      self.cachedHeight = parentHeight 

      return parentWidth, parentHeight 
    end 
  end 

  function Dimension:getCachedDimension() 
    return self.cachedWidth or 0, self.cachedHeight or 0 
  end 

  function Dimension:invalidate() 
    self.cachedWidth = nil 
    self.cachedHeight = nil 
  end 
end 

do Position = class() 
  Position.Type  = Enum { "Absolute", "Relative" }  -- This doesn't seem to be used...
  Position.Sides = Enum { "Left", "Right", "Top", "Bottom" } 

  function Position:init(arg) 
    arg = arg or {} 

    self.left   = arg.left 
    self.top    = arg.top 
    self.bottom = arg.bottom 
    self.right  = arg.right 

    self.alignment = arg.alignment or {} 

    if not (self.left or self.right) then 
      self.left = 0 
    end 

    if not (self.top or self.bottom) then 
      self.top = 0 
    end 
  end 

  function Position:get(parentX, parentY, parentWidth, parentHeight, width, height, dirty) 
    if dirty or not self.cachedX then 
      local x, y 
      local originX = parentX 
      local originY = parentY 

      if self.right then 
        originX = originX + parentWidth 
      end 

      if self.bottom then 
        originY = originY + parentHeight 
      end 

      for _, alignment in ipairs(self.alignment) do 
        local side = alignment.side 
        local ref = alignment.ref 
        local refWidth, refHeight = ref:getDimension() 
        local refX, refY = ref:getPosition() 

        if side == Position.Sides.Left then 
          originX = refX 
        elseif side == Position.Sides.Right then 
          originX = refX + refWidth 
        elseif side == Position.Sides.Top then 
          originY = refY 
        elseif side == Position.Sides.Bottom then 
          originY = refY + refHeight 
        else 
          Logger.Warn("Invalid side specified") 
        end 
      end 

      if self.left then 
        x = originX + UnitCalculator.GetAbsoluteValue(self.left, parentWidth) 
      elseif self.right then 
        x = originX - UnitCalculator.GetAbsoluteValue(self.right, parentWidth) - width 
      end 

      if self.top then 
        y = originY + UnitCalculator.GetAbsoluteValue(self.top, parentHeight) 
      elseif self.bottom then 
        y = originY - UnitCalculator.GetAbsoluteValue(self.bottom, parentHeight) - height 
      end 

      self.cachedX = x 
      self.cachedY = y 
    end 

    return self.cachedX, self.cachedY 
  end 

  function Position:invalidate() 
    self.cachedX = nil 
    self.cachedY = nil 
  end 

  function Position:getCachedPosition() 
    return self.cachedX or 0, self.cachedY or 0 
  end 

end 


----------- 
-- Color -- 
----------- 

-- Note that this is not local, and thus can be accessed outside of GTK
function unpackColor(col) 
  return col[1] or 0, col[2] or 0, col[3] or 0 
end 


------------- 
-- Unicode -- 
------------- 

-- Note that this is not local, and thus can be accessed outside of GTK
function string.ulen(str) 
  return select(2, str:gsub("[^\128-\193]", "")) -- count the number of non-continuing bytes 
end 


------------------- 
-- Event calling -- 
-------------------
CallEvent = function(object, event, ...) 
  local handler = object[event]
  
  if handler then 
    return handler, handler(object, ...) 
  end 
end 

---------------------------------- 
-- GTK Graphics                 -- 
-- Some flags and functions     -- 
-- for painting and more        -- 
---------------------------------- 

do 
  gtk.graphics = {} 
  local gg = gtk.graphics 

  gg.needsFullRedraw = true 
  gg.dimensionsChanged = true 

  gg.viewPortWidth  = 318 
  gg.viewPortHeight = 212 

  gg.areaToRedraw = {0, 0, 0, 0} 


  ------------------------------------------------ 
  -- Replacement for platform.window:invalidate -- 
  ------------------------------------------------ 

  gg.invalidate = function (x, y, w, h) 
    platform.window:invalidate(x, y, w, h) 

    if x then 
      gg.needsFullRedraw = false 
      gg.areaToRedraw = {x, y, w, h} 
    end 
  end 

end 


---------------------------------- 
-- GTK Screenmanager            -- 
---------------------------------- 

do gtk.RootScreen = {} 
  local RootScreen = gtk.RootScreen 
  local gg = gtk.graphics 

  local x, y = 0, 0 

  --------------------- 
  -- Screen handling -- 
  --------------------- 

  RootScreen.screens = {} 
  local screens = RootScreen.screens 

  function RootScreen:resetFocus(screen)
    local focusIndex = screen.defaultFocus
    if focusIndex then
      local children = screen.children
      for x = 1, #children do
        local child = children[x]
        child.hasFocus = false
      end
      child = children[focusIndex]
      if child and child.canFocus then
        screen:giveFocusToChildAtIndex(focusIndex)
      end
    end
  end
  
  function RootScreen:pushScreen(screen, args) 
    -- Reset focus:
    self:resetFocus(screen)
    
    screen:onPushed(args) 

    table.insert(screens, screen) 
    screen.parent = self 
  end 

  function RootScreen:popScreen(args) 
    local index = #screens 
    screens[index]:onPopped(args) 

    return table.remove(screens, index) 
  end 

  function RootScreen:peekScreen() 
    return screens[#screens] or RootScreen 
  end 

  function RootScreen:peekPreviousScreen()
    return screens[#screens - 1] or RootScreen
  end

  ---------------------------- 
  -- Dimension and position -- 
  ---------------------------- 

  function RootScreen:getDimension() 
    return gg.viewPortWidth, gg.viewPortHeight 
  end 

  function RootScreen:getPosition() 
    return x, y 
  end 

  ------------------- 
  -- Draw children -- 
  ------------------- 

  function RootScreen:paint(gc) 
    for k, screen in ipairs(self.screens) do 
      screen:paint(gc) 
    end 
  end 

  ---------------- 
  -- Invalidate -- 
  ---------------- 

  function RootScreen:invalidate() 
    gg.invalidate() 
  end 
end 

------------------ 
-- Screen class -- 
------------------ 

do gtk.Screen = class() 
  local Screen = gtk.Screen 
  local gg = gtk.graphics 

  function Screen:init(position, dimension) 
    self.parent = parent 
    self.position = position 
    self.dimension = dimension 

    self.children = {} 
  end 

  -------------------------------- 
  -- Dimension helper functions -- 
  -------------------------------- 

  function Screen:getDimension() 
    local parentWidth, parentHeight = self.parent:getDimension() 

    return self.dimension:get(parentWidth, parentHeight, gg.dimensionsChanged) 
  end 

  function Screen:getPosition() 
    local parentX, parentY = self.parent:getPosition() 
    local parentWidth, parentHeight = self.parent:getDimension() 
    local width, height = self:getDimension() 

    return self.position:get(parentX, parentY, parentWidth, parentHeight, width, height, gg.dimensionsChanged) 
  end 

  function Screen:containsPosition(x, y) 
    local cachedX, cachedY = self.position:getCachedPosition() 
    local cachedWidth, cachedHeight = self.dimension:getCachedDimension() 

    return x >= cachedX and y >= cachedY and x < cachedX + cachedWidth and y < cachedY + cachedHeight 
  end 

  --------------------- 
  -- Manage children -- 
  --------------------- 

  function Screen:addChild(child) 
    table.insert(self.children, child) 
    child.parent = self 
  end 

  function Screen:addChildren(...) 
    for k, child in ipairs{...} do 
      self:addChild(child) 
    end 
  end 

  ---------------- 
  -- Invalidate -- 
  ---------------- 

  function Screen:invalidate() 
    local cachedX, cachedY = self.position:getCachedPosition() 
    local cachedWidth, cachedHeight = self.dimension:getCachedDimension() 

    gg.invalidate(cachedX, cachedY, cachedWidth, cachedHeight) 
  end 

  ------------------- 
  -- Screen events -- 
  ------------------- 

  function Screen:onPushed(args) 
    -- when pushed 
  end 

  function Screen:onPopped(args) 
    -- when popped 
  end 

  -------------------- 
  -- Drawing events -- 
  -------------------- 

  function Screen:paint(gc) 
    self:prepare(gc) 

    local width, height = self:getDimension() 
    local x, y = self:getPosition() 

    -- If a view has a backgroundColor 
    -- (NOT a style.backgroundColor),
    -- it is drawn first in order to make a 
    -- View opaque.
    if self.backgroundColor then
      gc:setColorRGB(unpack(self.backgroundColor))
      gc:fillRect(x, y, width, height)
    end
    
    --debug draw bouding boxes 
    --gc:drawRect(x, y, width, height) 

    self:draw(gc, x, y, width, height) 

    for k, screen in ipairs(self.children) do 
      screen:paint(gc) 

      -- Reset color, pen, and font to default 
      gc:setColorRGB(0,0,0)
      gc:setPen()
      gc:setFont("sansserif", "r", 10)
    end 

    self:postDraw(gc, x, y, width, height) 
  end 

  function Screen:prepare(gc) 
    -- use this callback to calculate dimensions 
  end 

  function Screen:draw(gc, x, y, width, height) 
    -- all drawing should happen here 

    -- called before drawing children 
  end 

  function Screen:postDraw(gc, x, y, width, height) 
    -- all drawing should happen here 

    -- called after drawing children 
  end 
end

---------------- 
-- View class -- 
---------------- 

do gtk.View = class(gtk.Screen) 
  local View   = gtk.View 
  local Screen = gtk.Screen 
  local gg     = gtk.graphics 

  function View:init(args) 
    args = args or {} 
    
    self.ignoreIfChildHasEvent = true
    local dimension = args.dimension or Dimension() 
    local position  = args.position  or Position() 

    Screen.init(self, position, dimension) 
    self.defaultFocus = args.defaultFocus or 0
    self.focusIndex = self.defaultFocus
    self.backgroundColor = args.backgroundColor or {255, 255, 255}
    
  end 

  ----------------- 
  -- Focus logic -- 
  ----------------- 

  function View:switchFocus(direction, isChildView, counter) 
    local children = self.children 

    local focusIndex = self.focusIndex 

    local currentChild = children[focusIndex] 
    local continue = true 

    if currentChild and currentChild.focusIndex then 
--      continue = not currentChild:switchFocus(direction, true, 0) -- do we need to handle the focus change 
      continue = not currentChild.switchFocus -- do we need to handle the focus change 
    end 

    if continue then 

      if counter > #children then 
        return 
      else 
        counter = counter + 1 
      end 

      self:removeFocusFromChild(currentChild) 

      local nextFocusIndex = focusIndex + direction 
      local childrenCount = #self.children 
      local wrapped = false 

      if nextFocusIndex > childrenCount then 
        nextFocusIndex = 1 
        wrapped = true 
      elseif nextFocusIndex <= 0 then 
        nextFocusIndex = childrenCount 
        wrapped = true 
      end 

      if wrapped and isChildView then 
        return false -- we are not handling the focus change due to wrapping, the parent focus manager needs to handle it 
      else 
        return self:giveFocusToChildAtIndex(nextFocusIndex, direction, isChildView, counter) 
      end 
    end 
  end 

  function View:removeFocusFromChild(child) 
    if child then 
      self.focusIndex = 0 
      child.hasFocus = false 
      CallEvent(child, "onBlur") 
    end 
  end 

  function View:removeFocusFromChildAtIndex(index) 
    self:removeFocusFromChild(self:getFocusedChild()) 
  end 

  function View:giveFocusToChildAtIndex(index, direction, isChildView, counter) 
    local nextChild = self.children[index] 
    self.focusIndex = index 

    if nextChild then 
      if nextChild.ignoreFocus and direction and counter then 
        self:switchFocus(direction, false, counter) 
      else 
        nextChild.hasFocus = true 
        CallEvent(nextChild, "onFocus") 
      end 
    end 
  end 

  function View:getFocusedChild() 
    return self.children[self.focusIndex] 
  end 

  ----------------------------------------------- 
  -- Link tab and arrow events to focus change -- 
  ----------------------------------------------- 

  function View:tabKey() 
    self:switchFocus(1, false, 0)
    gg.invalidate() 
  end 

  function View:arrowRight()
    local child = self:getFocusedChild()
    if child and child.arrowRight then
      return 
    end
    self:switchFocus(1, false, 0)
    gg.invalidate() 
  end 

  function View:arrowDown()
    local child = self:getFocusedChild()
    if child and child.arrowDown then
      return 
    end
    self:switchFocus(1, false, 0)
    gg.invalidate() 
  end 

  function View:enterKey()
    local child = self:getFocusedChild()
    if child and child.enterKey then
      return 
    end
    self:switchFocus(1, false, 0)
    gg.invalidate() 
  end 

  function View:backtabKey() 
    self:switchFocus(-1, false, 0) 
    gg.invalidate() 
  end 

  function View:arrowUp()
    local child = self:getFocusedChild()
    if child and child.arrowUp then
      return 
    end
    self:switchFocus(-1, false, 0) 
    gg.invalidate() 
  end 

  function View:arrowLeft()
    local child = self:getFocusedChild()
    if child and child.arrowLeft then
      return 
    end
    self:switchFocus(-1, false, 0) 
    gg.invalidate() 
  end 

  ---------------------------------------
  -- Default behavior for pressing ESC --
  ---------------------------------------
  
  function View:escapeKey()
    local numScreens = #gtk.RootScreen.screens
    local child = self:getFocusedChild()

    if numScreens > 1 then
--      if not child or (child and not child.escapeKey) then
        gtk.RootScreen:popScreen()
        gtk.RootScreen:invalidate()
--      end
    end
  end

  ----------------------------------- 
  -- Link touch event focus change -- 
  -- and propagete the event       -- 
  ----------------------------------- 

  View.lastChildMouseDown = nil 
  View.lastChildMouseOver = nil 

  function View:getChildIn(x, y) 
    local lastChildIndex = View.lastChildMouseDown 

    if lastChildIndex then 
      local lastChild = self.children[lastChildIndex] 
      if lastChild and lastChild:containsPosition(x, y) then 
        return lastChildIndex, lastChild 
      end 
    end 

    for index, child in pairs(self.children) do 
      if child:containsPosition(x, y) then 
        return index, child 
      end 
    end 
  end 

  function View:mouseDown(x, y)
    if not self.getChildIn then
      return 
    end
    local index, child = self:getChildIn(x, y) 

    local lastChild = self:getFocusedChild() 
    if child ~= lastChild then 
      self:removeFocusFromChild(lastChild) 

      if index then 
        self:giveFocusToChildAtIndex(index) 
      end 
    end 

    View.lastChildMouseDown = index 

    if child then 
      CallEvent(child, "onMouseDown", x, y) 
    end 

    self:invalidate() 
  end 

  function View:mouseUp(x, y) 
    local lastChildIndex = View.lastChildMouseDown 

    if lastChildIndex then 
      local lastChild = self.children[lastChildIndex] 
      if lastChild then
        CallEvent(lastChild, "onMouseUp", x, y, lastChild:containsPosition(x, y)) 
      end
    end 

    self:invalidate() 
  end 

  --------------------------------------------- 
  -- Propagate other events to focused child -- 
  --------------------------------------------- 

  function View:onEvent(event, eventHandler, ...) 
    Logger.Log("View %q - event %q - eventHandler %q", tostring(self), tostring(event), tostring(eventHandler)) 

    local child = self:getFocusedChild() 

    --if not eventHandler and child then -- TODO: ADD event propogation block support 
    if child then 
      CallEvent(child, "onEvent", event, child[event], ...) 
      CallEvent(child, event, ...) 
    end 
  end 
end

---------------------------------- 
-- GTK Event Manager            -- 
-- Handle the events!           -- 
---------------------------------- 

do 
  gtk.eventmanager = {} 
  gtk.eventhandlers = {} 

  local em = gtk.eventmanager 
  local eh = gtk.eventhandlers 
  local gg = gtk.graphics 
  local rs = gtk.RootScreen 

  ----------- 
  -- TOOLS -- 
  ----------- 

  -- We will use this function when calling events 
  local callEventHandler = function (func, ...) 
    if func then 
      func(...) 
    end 
  end 

  ------------------- 
  -- EVENT LINKING -- 
  ------------------- 

  local eventLinker = {} 
  local triggeredEvent 

  local eventDistributer = function (...) 
    local currentScreen = rs:peekScreen() 
    local eventHandler = currentScreen[triggeredEvent] 
    local blockEvent   = currentScreen.ignoreIfChildHasEvent
    local child 
    if currentScreen.getFocusedChild then
      child = currentScreen:getFocusedChild()      
    end

    local genericEventHandler = currentScreen.onEvent
    
    if genericEventHandler then 
      genericEventHandler(currentScreen, triggeredEvent, eventHandler, ...) 
    end 
    
    if child and child[triggeredEvent] and blockEvent then
      return 
    end

    if eventHandler then 
      eventHandler(currentScreen, ...) 
    end 
  end 

  eventLinker.__index = function (on, event) 
    triggeredEvent = event 
    return eventDistributer 
  end 

  setmetatable(on, eventLinker) 

  on.activate = function () 
    gg.needsFullRedraw = true 
  end 

  on.getFocus = function () 
    gg.needsFullRedraw = true 
  end 

  on.resize = function (width, height) 
    Logger.Log("Viewport dimensions changed to %dx%d", width, height) 

    gg.dimensionsChanged = true 
    gg.needsFullRedraw = true 

    gg.viewPortWidth  = width 
    gg.viewPortHeight = height 
  end 

  on.paint = function(gc) 
    gc:smartClipRect("set", 0, 0, gg.viewPortWidth, gg.viewPortHeight) 

    --eventLinker.__index(on, "paint")(gc) 
    rs:paint(gc, 0, 0, gg.viewPortWidth, gg.viewPortHeight) 

    gg.dimensionsChanged = false 
  end 

end 


------------------- 
-- Widget things -- 
------------------- 

gtk.Widgets = {} 

do gtk.Widget = class(gtk.Screen) 
  local Widget   = gtk.Widget 
  local Screen   = gtk.Screen 
  local deepcopy = gtk.tools.deepcopy

  Widget.canFocus = true

  function Widget:init(position, dimension) 
    Screen.init(self, position, dimension)
    self.hasFocus = false
    self.defaultStyle = {}
  end
  
  function Widget:setStyle(argStyle)
    local style = deepcopy(self.defaultStyle)
    local function updateStyle(default, newStyle) -- This function recursively copies a table's contents, and ensures that metatables are preserved. That is, it will correctly clone a pure Lua object.
      local res = default
      for k, v in pairs(newStyle) do
        if type(v) == 'table' then
          v = updateStyle(default[k], newStyle[k])
        end
        res[k] = v
      end
      return res
    end
    self.style = updateStyle(style, argStyle)
  end  

  function Widget:hide()
    self.visible = false
    self.ignoreFocus = true
    if self.hasFocus then
      self.parent:tabKey()
    end
    self.parent:invalidate()
  end
  
  function Widget:show()
    self.visible = true
    if self.canFocus then
      self.ignoreFocus = false
    end
    self.parent:invalidate()
  end
  
  function Widget:disable()
    self.disabled = true
    self.ignoreFocus = true
    if self.hasFocus then
      self.parent:tabKey()
    end
    self.parent:invalidate()
  end
  
  function Widget:enable()
    self.disabled = false
    if self.canFocus then
      self.ignoreFocus = false
    end
    self.parent:invalidate()
  end
end 

do Box = class(gtk.Widget) 
  local Widget = gtk.Widget 

  function Box:init(position, dimension, text) 
    Widget.init(self, position, dimension) 

    self.text = text 
  end 

  function Box:draw(gc, x, y, width, height) 
    Logger.Log("In Box:draw %d, %d, %d, %d", x, y, width, height) 

    gc:setColorRGB(0, 0, 0) 

    if self.hasFocus then 
      gc:fillRect(x, y, width, height) 
    else 
      -- No, draw only the outline 
      gc:drawRect(x, y, width, height) 
    end 

    gc:setColorRGB(128, 128, 128) 
    gc:setFont("sansserif", "r", 7) 

    if self.text then 
      gc:drawString(self.text, x + 2, y, "top") 
      gc:drawString(width .. "," .. height, x + 2, y + 9, "top") 
    end 
  end
end 

---------------------------------
-- Load the other GTK modules, --
-- taking into account any     --
-- dependencies.               --
---------------------------------
local modules = {"gtk_button", "gtk_checkbox", "gtk_editor", "gtk_input", "gtk_label", "gtk_scrollbar", "gtk_views", "gtk_widgetgrp"}
for x = 1, #modules do
  loadLibrary("GTKLib\\" .. modules[x])
end